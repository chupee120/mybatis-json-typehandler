buildscript {
    ext {
        kotlin_version = '1.3.0'
        scm_url = 'https://github.com/wangkezun/mybatis-json-typehandler'
        scm_connection = 'scm:git:git@github.com:wangkezun/mybatis-json-typehandler.git'
        scm_developerConnection = 'scm:git:git@github.com:wangkezun/mybatis-json-typehandler.git'
        scm_tag = 'HEAD'
        issueUrl = 'https://github.com/wangkezun/mybatis-json-typehandler/issues'
    }

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
    }
}

group = 'io.wkz.kotlin'
version = '1.0.1'

apply plugin: 'kotlin'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'org.jetbrains.dokka'

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile group: 'org.mybatis', name: 'mybatis', version: '3.4.6'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.7'
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.9.7'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.0.6.RELEASE'
    testCompile group: 'mysql', name: 'mysql-connector-java', version: '8.0.13'
    testCompile group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: '1.3.2'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.1'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
test {
    useJUnitPlatform()
}

// build.gradle
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
}

check.dependsOn jacocoTestReport

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir
    inputs.dir 'src/main/kotlin'
    cacheRoot = 'default'
    noStdlibLink = true
    externalDocumentationLink {
        // Root URL of the generated documentation to link with. The trailing slash is required!
        url = new URL("https://kotlinlang.org/api/latest/jvm/stdlib/")

        // If package-list file located in non-standard location
//        packageListUrl = new URL("file:///Users/wangkezun/Downloads/package-list")
    }
}

task packageJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'mybatis-json-typehandler'
                url = 'https://github.com/wangkezun/mybatis-json-typehandler'
                description = 'A Mybatis TypeHandler for json object and json array'
                scm {
                    url = scm_url
                    connection = scm_connection
                    developerConnection = scm_developerConnection
                    tag = scm_tag
                }

                license {
                    name = 'MIT Licence'
                    url = 'https://raw.githubusercontent.com/wangkezun/mybatis-json-typehandler/master/LICENSE'
                    distribution = 'repo'
                }
                developers {
                    developer {
                        id= 'wangkezun'
                        name = 'Wang Kezun'
                        email = 'wangkezun@gmail.com'
                    }
                }
                issueManagement {
                    system = 'GitHub Issues'
                    url = issueUrl
                }
            }
            artifact sourceJar {
                classifier "sources"
            }
            artifact packageJavadoc {
                classifier "javadoc"
            }
        }
    }
    repositories {
        maven {
            if (project.version.endsWith('-SNAPSHOT')) {
                url = "https://oss.sonatype.org/content/repositories/snapshots"
            } else {
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            }
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}
signing {
    required { gradle.taskGraph.hasTask("publishing") }
    sign publishing.publications.mavenJava
}
